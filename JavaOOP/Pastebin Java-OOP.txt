1. Napisati klasu Osoba, koja ima sledece atribute:
- ime
- prezime
- godinaRodjenja
- visina
Obezbediti konstruktor koji prima sve argumente za atribute i za svaki atribut getter i setter.
Napisati toString() metod koji ispisuje Osobu na sledeci nacin:
Ime osobe je: {ime}
Prezime osobe je: {prezime}
Godina rodjenja osobe je: {godinaRodjenja}
Visina osobe je: {visina}
 
 
2. Napisati klasu Pravougaonik koja ima atribute:
- double sirina
- double visina
Obezbediti konstruktor koji prima argumente za oba atributa i gettere i settere za svaki.
Napisati metode:
- obim : vraca obim pravougaonika
- povrsina : vraca povrsinu pravougaonika
Napisati toString() metod koji ispisuje Pravougaonik na sledeci nacin:
Pravougaonik sirine {sirina} i visine {visina} ima:
Obim: {obim},
Povrsinu: {povrsinu}
 
 
 
3. Napisati klasu Krug koja ima atribute:
- double poluprecnik
Obezbediti konstruktor koji prima vrednost za poluprecnik.
Obezbediti getter i setter za atribut poluprecnik.
Napisati metode:
- obim : vraca obim kruga
- povrsina : vraca povrsinu kruga
Koristiti Math Java biblioteku (Math.PI za konstantu pi)
 
 
 
4. Napisati klasu Automobil koja ima atribute:
- String marka
- String zemljaPoreka
- int godinaProizvodnje
- double kilometraza
Napraviti dva konstruktora koja prima sve argumente, s tim da prvi prima godinu proizvodnja kao int, a drugi kao String (pa ga parsirati kasnije).
Napisati gettere i settere za sva polja (atribute) i automatski generisati toString() metodu.
 
 
 
5. Napisati klasu Trougao koja ima 3 double atributa za polja.
Napraviti metodu 'daLiJeTrougaoValidan', koji proverava da li 3 prosledjene stranice mogu da budu stranice nekog trougla.
Trougao nije validan ako je zbir bilo kojih dveju stranica strogo manji od duzine trece ili ako je neka stranica nepozitivne duzine.
Napraviti konstruktor koji prima 3 argumenta za atribute i proverava njihovu validnost. Ako nisu validni, ispisati neku odgovarajucu poruku i postaviti sve stranice na -1.
Napraviti gettere i settere za svako polje, kao i metode 'obim' i 'povrsina' 
(Pogledati heronov obrazac: https://en.wikipedia.org/wiki/Heron%27s_formula)
Napraviti toString() metod:
Duzina stranice A je: {stranicaA}
Duzina stranice B je: {stranicaB}
Duzina stranice C je: {stranicaC}
 
 
6. Napisati klasu Knjiga koja ima sledeca polja/atribute:
nazivKnjige (string),
autor (Osoba),
vlasnik (Osoba)
brojStrana (int),
godinaIzdanja (int).
Broj strana i godina izadanje ne mogu biti negativni. Ispisati poruku o gresci ako korisnik pokusa da napravi knjigu sa negativnim brojem strana ili godinom izdanja (u konstruktoru, jer se tamo 'pravi' knjiga).
Takodje ispisati poruku o gresci ako korisnik pokusa da set-uje neku od ove dve vrednosti na negativno.
Napisati sledece metode
	2 konstruktora. Knjiga ne mora imati vlasnika -> dakle jedan konstruktor gde se salje i ko je vlasnik, drugi konstruktor gde se ne salje ko je vlasnik
	getter i setter metode za sva polja
	toString koristeci stringBuilder
	format
		Naziv knjige je: <naziv knjige>
		Autor knjige je: <ime i prezime autora ako postoji, 'nepoznato' ako autor nije postavljen (null)>
		Vlasnik knjige je: <ime i prezime vlasnika ako postoji, 'knjiga nema vlasnika' ako vlasnik nije postavljen (null)>
		Broj strana: <broj strana>
		Godina izdanja: <godina izdanja>
	napisati i metodu "velicinaKnjige" koja vraca string
		- "mala knjiga" - ako je broj strana od 0 do 100
		- "srednje velika knjiga" - ako je broj strana od 101 do 300
		- "velika knjiga" - ako je broj strana od 301-600
		- "bas velika knjiga" - ako je broj strana 601 i vise
 
 
7. Napisati naredne klase:
vozilo  - Napisati klasu Automobil. Automobil ima
1) marku (polje tipa String) koje moze da se dohvati, ali ne i postavi;
2) model (polje tipa String) koje moze da se dohvati ali ne i postavi;
3) serijski broj (neka u ovom zadatku bude polje tipa int) koje moze da se dohvati ali ne i postavi;
Automobil moze da ima 4) vlasnika, i vlasnik moze da se dohvati i postavi u svakom trenutku        Napisati klasu Voznja iz koje ce program moci da se pokrene. U njoj ce se kreirati najmanje dva automobila. Iskoristiti (proizvoljan broj puta) sve tipove metoda napisanih u klasi Automobil.
sport - Napisati klasu Sportista. Sportista ima
1) ime i prezime (polje tipa String) koje moze da se dohvati, ali ne i postavi
2) sport kojim se bavi (polje tipa String) koje moze da se dohvati ali ne i postavi
3) klub za koji igra (polje tipa String) koje moze da se dohvati. Sportista moze da promeni klub za koji igra.
4) broj koji nosi na dresu ( tipa int) koje moze i da se dohvati i da se postavi.
Napisati glavni program koji kreira tri igraca. U glavnom programu iskoristiti (proizvoljan broj puta) sve tipove metoda napisanih u klasi Sportista.
 
 
8. Napisati naredne klase:
Napisati klasu grad koja ima sledece polja/atribute
	- ime(String)
	- brojStanovnika(int)
	- drzava(String)
Napisati sledece metode
	konstruktor - samo jedan, ( sva polja su obavezna)
	getter i setter
	toString
		Ime grada: <ime>
		Broj stanovnika: <brojStanovnika>
		Drzava: <drzava>
---------------------------------------------------------------------------------------
Napisati klasu Putovanje koja ima sledeca polja/atribute:
	- destinacija(Grad)
	- vodjaPuta (Osoba)
	- vozilo (Automobil) - ovo polje se odnosi na automobil kojim se ide na putovanje
	- udaljenostUKm (double)
	- prijavljeneOsobe (arrayList)
udaljenostUKm ne sme biti negativna. Ispisati poruku o gresci ako korisnik pokusa da napravi Putovanje sa negativnom udaljenoscu.
Takodje ispisati poruku o gresci ako korisnik pokusa da set-uje udaljenostUKm na negativno.
Napisati sledece metode:
	2 konstruktora -> vodja puta ne mora da postoji, u oba konstruktora ne treba slati niz prijavljeneOsobe, vec u oba konstruktora ovaj niz napravite kao prazan
	gettere settere
	toString metodu koristeci StringBuilder
	format
	Destincija: <ImeGrada, ImeDrzave>
	Vodja puta je: <ime i prezime vodje puta ako postoji, 'putovanje nema vodju puta' ako vodja puta nije postavljen (null)>
	Putuje se automobilom: <marka, godinaProizvodnje, kilometraza>
	Udaljenost do destinacije u kilometrima je: <udaljenostUKm>
	Prijavljene osobe:
		<ime> <prezime>
		<ime> <prezime>
		<ime> <prezime>
		<ime> <prezime>
		....
	primer
	Destincija: Pariz, Francuska
	Vodja puta je: Petar Petrovic
	Putuje se automobilom: BMW, 2016, 192000
	Udaljenost do destinacije je: 1300
	Prijavljene osobe:
		Zoran Milicevic
		Pera Peric
		Marko Markovic
	napisati i metodu koja racuna koliko je vremena potrebno da se stigne na destinaciju pri odredjenoj prosecnoj brzini. Dakle metoda treba da primi argument koji kaze koliko kilometra na sat (double) ce biti prosecna brzina automobila, a da vrati koliko ce sati biti potrebno da se dodje do destinacije ako se auto bude vozio tom prosecnom brzinom.
	napisati metodu prijava, koja prima kao argument osobu koja se prijavljuje na putovanje
	napisati metodu odjava, koja prima kao argument osobu koja se odjavljjuje sa putovanja (opciono)
	Napisati i test program koji pravi nekoliko gradova i nekoliko automobila i nekoliko osoba, i onda napravite neka putovanja u neke od tih gradova, sa nekim od tih automobila i vodja puta, i onda prijavite neke od osoba na neka od putovanja, i onda pozovite i metodu za racunanje koliko je vremena potrebno da se stigne pri odredjenoj brzini.
 
 
9.
Napisati klasu Ucenik koja ima sledeca polja:
	- String ime
	- String prezime
	- ArrayList ocene
 
Napisati 2 konstruktora, jedan koji prima argumente za sva polja, a drugi koji prima ime i prezime, a ocene postavlja na praznu listu.
Napisati gettere i settere za sva polja.
Napisati toString() metod:
	{ime} i {prezime} ima ocene:
	{ocene}
Napisati metod proske koji racuna prosek Ucenika.
---------------------------------------------------------------------------------------------------------------------------------------
Napisati klasu Odeljenje koja ima sledeca polja:
	- String oznaka
	- ArrayList dnevnik
 
Napisati 2 konstruktora, opet na isti nacin.
Napisati gettere i settere za sva polja.
Napisati metod upisiUcenika(Ucenik u) koja dodaje ucenika {u} u dnevnik.
Napisati metod upisiUcenika(Ucenik u, int redniBroj) koji dodaje ucenika {u} u dnevnik na redni broj {redniBroj}
Napisati metod ispisiUcenika(Ucenik u) koja brise ucenika {u} iz dnevnika.
Napisati metod ispisiUcenika(int i) koja brise ucenika na poziciji {i} u dnevniku.
Napisati metod pogledajOcene(Ucenik u) koja ispisuje sve ocene ucenika {u}.
Napisati metod pogledajOcene(int i) koja ispisuje sve ocene ucenika na poziciji {i} u dnevniku.
Napisati metod prosecnaOcena(Ucenik u) koja ispisuje prosecnu ocenu ucenika {u}.
Napisati metod prosecnaOcena(int i) koja ispisuje prosecnu ocenu ucenika na poziciji {i} u dnevniku.
Napisati metod prosecnaOcenaOdeljenja() koja vraca prosecnu ocenu celog odeljenja (0, ako nema ucenika u odeljenju).
Napisati metod opisnaOcena(Ucenik u) koja ispisuje:
	- "Odlican"; ako je prosek ucenika {u} 4.5 ili vise
	- "Vrlo dobar"; ako je prosek ucenika {u} [3.5, 4.5)
	- "Dobar"; ako je prosek ucenika {u} [2.5, 3.5)
	- "Dovoljan"; ako je prosek ucenika {u} [1.5, 2.5)
	- "Nedovoljan"; ako ucenik {u} ima barem jednu jedinicu
Napisati metod izlistajDnevnik() koja vraca String oblika:
	{ime} i {prezime} ima ocene:
	{ocene}
za sve ucenike.
Napisati metod String velicinaOdeljenja() koja vraca odgovarajucu poruku:
	- "Veliko odeljenje"; ako ima vise od 25 ucenika
	- "Srednje odeljenje"; ako ima ucenika izmedju 15 i 25
	- "Malo odeljenje"; ako ima ucenika manje od 15
Napisati toString() metod:
	{Oznaka} odeljenja ima djake:
	{Ime1} {Prezime1}
	{Ime2} {Prezime2}
	.
	.
	.
	{ImeN} {PrezimeN}
 
 
 
10.
#####
Ovaj zadatak je dosta tezak!
Procitajte zadatak u celosti i razmislite tacno sta se trazi od Vas pre nego sto krenete da kucate kod!
Klasa korpa je verovatno najteza klasa od svih ovih. Tu morate bas dobro da razmislite sta se desava!
#####
 
Napisati klasu Film koja sadrzi atribute:
	- String ime
	- int godinaPremijere (godina kada je film prvi put prikazan; 1888 - 2021) (default = 2021)
	- double ocena (ocena filma, [1.0, 10.0]) (default = 1.0)
	- String sadrzaj (kratak sadrzaj filma)
	- int sati, minuti, sekunde (koliko sati, minuti i sekundi traje film| [0, 10), [0, 59], [0, 59] ) (default = 1, 30, 0)
 
Napisati konstruktor(e) i proveriti da li su unosi validni. Ako uslovi nisu validni, postaviti ih na default vrednosti.
Napisati toString() metod:
	"{ime} {godinaPremijere} {ocena}
	 Duzina trajanja: {sati} : {minuti} : {sekunde}
	 {sadrzaj}"
 
---------------------------------------------------------------------------------------------------------------------------------------
 
Napisati klasu FilmNaStanju koja sadrzi atribute:
	- Film film
	- int kolicina (koliko kopija datog filma ima u nekom video klubu)
	- double cena (koliko kosta dati film da se iznajmi u nekom video klubu)
 
Napisati konstruktor(e).
Napisati toString() metod:
	"{imeFilma} - {cena} | Na stanju: {kolicina}"
 
---------------------------------------------------------------------------------------------------------------------------------------
 
Napisati klasu VideoKlub koja sadrzi polja:
	- String naziv (naziv video kluba)
	- ArrayList katalog (katalog svig filmova na stanju)
 
Napisati konstruktor(e).
Napisati metod iznajmiFilm(Film f) - iznajmljuje jednu kopiju filma f ako je to moguce. Ako nije, ispisati na konzolu poruku: 
	"Film {nazivFilma} trenutno nema na stanju".
Napisati metod iznajmiFilm(Film f, int n) - iznajmljuje n kopija filma f ako je to moguce. Ako nije moguce iznajmiti sve, 
	iznajmiti sto vise kopija datog filma i ispisati poruku:
	"Jos {brojKupacaKojiJosCekaNaIznjamljivanje} kupaca zeli da iznajmi film {nazivFilma}"
	Ako nije moguce iznajmiti ni jedan film ipisati poruku:
	"Film {nazivFilma} trenutno nema na stanju".
Napisati metod dodajFilm(Film f, double c) - dodaje jednu kopiju filma f u katalog i postavlja mu cenu na c.
Napisati metod dodajFilm(Film f, double c, int n) - dodaje n kopija filma f u katalog i postavlja im cenu na c.
Napisati metod pregledajFilm(Film f) - ispisuje na konozulu:
	"{imeFilma} - {cena} | Na stanju: {kolicina}" 
	"{sadrzajFilma}"
	(ili "{imeFilma} | Nema na stanju")
Napisati metod pregledajKatalog() - ispisuje ceo katalog na konzolu:
	"{imeFilma1} - {cena1} | Na stanju: {kolicina1}"
	.
	.
	.
	"{imeFilmaN} - {cenaN} | Na stanju: {kolicinaN}"
 
---------------------------------------------------------------------------------------------------------------------------------------
 
Napisati klasu Korpa koja sadrzi polja:
	- VideoKlub vk (neki video klub)
	- ArrayList korpa (korpa u koju mogu da se stavljaju filmovi koje neki kupac hoce da kupi)
	- double ukupnaCena (ukupna cena filmova u korpi)
 
Napisati odogarajuc(e) konstruktor(e) i metode za ovu klasu.
Napisati metodu dodajFilmUKorpu(Film f) - dodaje jednu kopiju film f u korpu ako ga ima na stanju u zadatom video klubu.
	AKo zadatog filma nema na stanju ispisati poruku:
	"Film {f} nema na stanju."
Napisati metodu dodajFilmaUKorpu(Film f, int n) - dodaje n kopija filma f u kopru ako ga ima na stanju u zadatom video klubu.
	Ako u video klubu ima manje od n kopija filma f, onda dodati sve preostale kopije u korpu i ispisati poroku:
	"Nije moguce kupiti {n} filmova {nazivFilma}.
	 U korpu je dodato {brojKopija} kopija filma {nazivFilma}."
Napisati metod izbaciIzKorpe(Film f) - izbacuje jednu kopiju filma f iz korpe (pretpostaviti da takav film uvek postoji u korpi).
	Ispisati poruku:
	"Izbacili ste kopiju filma {nazivFilma} iz korpe".
Napisati metod izbaciIzKorpe(Film f, int n) - izbacuje n kopija filma f iz korpe i ispisati poruku:
	"Izbacili ste {n} kopija filma {nazivFilma} iz korpe.".
	Ako je prosledjen broj n veci ili jednak broju kopija filma f u korpi ispisati poruku:
	"Izbacili ste sve kopije filma {nazivFilma} iz korpe."
Napisati metod izbaciIzKopreSveKopije(Film f) - izbacuje sve kopije filma f iz korpe i ispisuje poruku:
	"Izbacili ste sve kopije filma {nazivFilma} iz korpe."
Napisati metod izbaciSveIzKorpe() - potpuno prazni korpu i ispisuje poruku:
	"Korpa je sada prazna."
Napisati metod ispisiInventarKorpe() koja ispisuje inventar korpe:
	"{nazivFilma1} {brojKopijaFilma1UKorpi} {ukupnaCenaSvihKopijaFilma1UKopri}
	 .
	 .
	 .
	 {nazivFilmaN} {brojKopijaFilmaNUKorpi} {ukupnaCenaSvihKopijaFilmaNUKopri}"
	 Ukupna cena: {ukupnaCena} svih filmova u korpi"
 
 
---------------------------------------------------------------------------------------------------------------------------------------
 
Napisati klasu Kupac koja sadrzi polja:
	- Osoba kupac
	- double racun (novac sa kojim kupac raspolaze)
	- Korpa kopra (korpa nekog kupca)
	- ArrayList filmovi (filmovi koje je kupac kupio)
 
Napraviti konstruktor koji pravi novog kupca i postavlja da su korpa i filmovi koje vec poseduje prazni.
Omoguciti da kupac moze da ubacuje i izbacuje filmove iz korpe, kao i da pregleda njen sadrzaj.
Napisati metodu kupi() - kupuje sve filmove iz korpe i smesta ih u listu filmova, ako kupac ima dovoljno novca za to i ispisuje:
	"Uspesno kupljeno {brojStavki} filmova". 
	U suprotnom ispisuje poruku:
	"Nemate dovoljno novca!
	 Potrebno: {ukupnaCenaKorpe}
	 Na raspolaganju: {racun}"
Napisati metodu pregledajFilmove() - ispisuje sve filmove koje kupac poseduje:
	"{nazivFilma1} {brojKopijaFilma1}"
	.
	.
	.
	"{nazivFilmaN} {brojKopijaFilmaN}"
	"Ukupno filmova: {brojFilmova}"
	"Ukupna duzina trajanja: {sati} : {minuti} : {sekunde}"